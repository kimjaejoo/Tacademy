/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.6
 * Generated at: 2016-11-02 04:00:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class cookie_005ftest2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

// 쿠키값을 뽑는메서드를 사용한다.
	public String getCookie(String key, Cookie[] cookies) {
		if (cookies != null)
			for (Cookie c : cookies) {
				if (c.getName().equals(key)) // 동일한 키가 존재할시 
				{
					return c.getValue(); // 값획득
				}
			}
		return "";
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	// 실습 => 2개의 입력창의 쿠키값을 읽어서 셋팅하기
	// 단 , 쿠키값을 뽑는 멤버 메소드를 구성하여 데이터를 획득하고 expression으로 값세팅
	// 이미 넣어져 있는 값을 이용하여

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

	// 쿠키 읽기
	Cookie[] cookies = request.getCookies();
	if (cookies != null)
		for (Cookie c : cookies) {
			System.out.println(c.getName() + " / " + c.getValue());
		}
	// 실습 => 2개의 입력창에 각각 쿠키값을 읽어서 세팅하시오.
	//        단, 쿠키값을 뽑는 맴버 메소드를 구성하여 데이터를 획득하고 expression으로 값세팅

      out.write("\r\n");
      out.write("<!DOCTYPE>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\r\n");
      out.write("<!-- jquery 추가하기 -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t\r\n");
      out.write("\t// interpreter 방식으로 위에서 한줄씩 읽어서 실행한다.\r\n");
      out.write("\t// html 문서가 모두 메모리에 올라왔다 !! 로드됨!!\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\t//alert(\"hi\");\r\n");
      out.write("\t\t// selector : 대상을 찾는다 + 이벤트, 기타 처리 \r\n");
      out.write("\t\t// css 제공 / $(\"*\") , $(\"body\"), $(\"fieldset input\")\r\n");
      out.write("\t\t// $(\"fieldset>input\"), $(filedset, input), $(\".style\"),\r\n");
      out.write("\t\t//$(\"#change\").onclick(function(){});\r\n");
      out.write("\t\tconsole.log($(\"#change\"));\r\n");
      out.write("\t\t$(\"#change\").on(\"click\", function() {\r\n");
      out.write("\t\t\t// ajax 처리 form이 없어서 사용한다.\r\n");
      out.write("\t\t\t// ajax를 만들어 사용할때 만드는 기초적인 스타일\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t// key and value를 넣는다.\r\n");
      out.write("\t\t\t\turl : \"/Hello/cookieProc\", // ajax를 넘길 페이지\r\n");
      out.write("\t\t\t\ttype : \"post\", // servlet file에서 처리하는 방식\r\n");
      out.write("\t\t\t\tdata : $(\"form\").serialize(), // 아래의 html 코드에서 작성되어지거나 특정 name값을 넣을수있다.\r\n");
      out.write("\t\t\t\tdataType : \"text\", // ajax로 값을 넘길때 사용되는 data의 type 지금은 String = text를 사용한다.\r\n");
      out.write("\t\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\t\t// 실습성격상 응답데이트는 현재 의미없다.\r\n");
      out.write("\t\t\t\t\tconsole.log(\"성공\", data);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\terror : function(err) {\r\n");
      out.write("\t\t\t\t\t// 실습성격상 응답데이트는 현재 의미없다.\r\n");
      out.write("\t\t\t\t\tconsole.log(\"실패\", err);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t$(\"#delete\").on(\"click\", function() {\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t// key and value를 넣는다.\r\n");
      out.write("\t\t\t\turl : \"/Hello/cookieProc\",\r\n");
      out.write("\t\t\t\ttype : \"delete\",\r\n");
      out.write("\t\t\t\tdata : \"delkey=age\", // \r\n");
      out.write("\t\t\t\tdataType : \"text\", // 밑의 데이터가 json타입으로 들어온다.\r\n");
      out.write("\t\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\t\t// 실습성격상 응답데이트는 현재 의미없다.\r\n");
      out.write("\t\t\t\t\tconsole.log(\"성공\", data);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\terror : function(err) {\r\n");
      out.write("\t\t\t\t\t// 실습성격상 응답데이트는 현재 의미없다.\r\n");
      out.write("\t\t\t\t\tconsole.log(\"실패\", err);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t");
      out.print(getCookie("age", cookies));
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<fieldset>\r\n");
      out.write("\t\t<form>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"uid\" value=\"");
      out.print(getCookie("uid", cookies));
      out.write("\" /><br />\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"upw\" value=\"");
      out.print(getCookie("upw", cookies));
      out.write("\" />\r\n");
      out.write("\t\t\t<button id=\"change\">변경</button>\r\n");
      out.write("\t\t\t<button id=\"delete\">삭제</button>\r\n");
      out.write("\t\t\t<input type=\"button\" value=\"버튼\" id=\"btn\" />\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</fieldset>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");

	

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
